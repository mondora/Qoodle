"use strict";

var _bluebird = require("bluebird");

var _browserSync = require("browser-sync");

var _browserSync2 = _interopRequireDefault(_browserSync);

var _child_process = require("child_process");

var _connectHistoryApiFallback = require("connect-history-api-fallback");

var _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);

var _dotenv = require("dotenv");

var _dotenv2 = _interopRequireDefault(_dotenv);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _gulp = require("gulp");

var _gulp2 = _interopRequireDefault(_gulp);

var _gulpLoadPlugins = require("gulp-load-plugins");

var _gulpLoadPlugins2 = _interopRequireDefault(_gulpLoadPlugins);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _mkdirp = require("mkdirp");

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _proGulp = require("pro-gulp");

var _proGulp2 = _interopRequireDefault(_proGulp);

var _webpack = require("webpack");

var _webpack2 = _interopRequireDefault(_webpack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gp = (0, _gulpLoadPlugins2.default)();

/*
*   Constants
*/
var _process$env = process.env;
var _process$env$NODE_ENV = _process$env.NODE_ENV;
var NODE_ENV = _process$env$NODE_ENV === undefined ? "development" : _process$env$NODE_ENV;
var _process$env$EXEC_ENV = _process$env.EXEC_ENV;
var EXEC_ENV = _process$env$EXEC_ENV === undefined ? "browser" : _process$env$EXEC_ENV;

var MINIFY_FILES = NODE_ENV === "production";
var testDir = process.cwd() + "/test";
var appDir = process.cwd() + "/app";
var buildDir = process.cwd() + "/build";
var depsPath = process.cwd() + "/deps.json";
var npmDir = process.cwd() + "/node_modules/.bin";

/*
*   Utils
*/

function getCommitSha() {
    try {
        return (0, _child_process.execSync)("git rev-parse HEAD").toString();
    } catch (ignore) {
        console.warn("Failed to get commit sha via git command");
    }
    try {
        return (0, _child_process.execSync)("cat .git/ORIG_HEAD").toString();
    } catch (ignore) {
        console.warn("Failed to get commit sha by reading from ORIG_HEAD");
    }
    return null;
}

/*
*   Builders
*/

_proGulp2.default.task("buildMainHtml", function () {
    return _gulp2.default.src(appDir + "/main.html").pipe(gp.preprocess({ context: { EXEC_ENV: EXEC_ENV, NODE_ENV: NODE_ENV } })).pipe(gp.rename("index.html")).pipe(_gulp2.default.dest(buildDir + "/"));
});

_proGulp2.default.task("buildAllScripts", function () {
    var deps = JSON.parse(_fs2.default.readFileSync(depsPath));
    _mkdirp2.default.sync(buildDir + "/_assets/js");
    var compiler = (0, _webpack2.default)({
        entry: {
            app: appDir + "/main.jsx",
            vendor: deps.js
        },
        devtool: "source-map",
        output: {
            filename: buildDir + "/_assets/js/app.js"
        },
        module: {
            loaders: [{
                test: /\.jsx?$/,
                exclude: /node_modules/,
                loader: "babel"
            }, {
                test: /\.json$/,
                loader: "json"
            }]
        },
        resolve: {
            root: appDir,
            extensions: ["", ".js", ".json", ".jsx"]
        },
        plugins: [new _webpack2.default.DefinePlugin({
            "process.env.NODE_ENV": JSON.stringify(NODE_ENV),
            "process.env.EXEC_ENV": JSON.stringify(EXEC_ENV)
        }), new _webpack2.default.optimize.DedupePlugin(), new _webpack2.default.optimize.CommonsChunkPlugin("vendor", buildDir + "/_assets/js/vendor.js"), MINIFY_FILES ? new _webpack2.default.optimize.UglifyJsPlugin() : null].filter(function (i) {
            return i;
        })
    });
    return (0, _bluebird.promisify)(compiler.run.bind(compiler));
}());

_proGulp2.default.task("buildAppAssets", function () {
    return _gulp2.default.src(appDir + "/assets/**/*").pipe(_gulp2.default.dest(buildDir + "/_assets/"));
});

_proGulp2.default.task("buildAppVersion", function () {
    var pkg = JSON.parse(_fs2.default.readFileSync(process.cwd() + "/package.json", "utf8"));
    var commitSha = getCommitSha();
    var commitShaString = commitSha ? " - " + commitSha : "";
    var version = "" + pkg.version + commitShaString;
    _fs2.default.writeFileSync(buildDir + "/VERSION", version);
});

_proGulp2.default.task("buildVendorStyles", function () {
    var deps = JSON.parse(_fs2.default.readFileSync(depsPath));
    return _gulp2.default.src(deps.css).pipe(gp.concat("vendor.css")).pipe(gp.if(MINIFY_FILES, gp.cssnano())).pipe(_gulp2.default.dest(buildDir + "/_assets/css/"));
});

_proGulp2.default.task("buildVendorFonts", function () {
    var deps = JSON.parse(_fs2.default.readFileSync(depsPath));
    return _gulp2.default.src(deps.fonts).pipe(_gulp2.default.dest(buildDir + "/_assets/fonts/"));
});

_proGulp2.default.task("build", _proGulp2.default.parallel(["buildMainHtml", "buildAllScripts", "buildAppAssets", "buildAppVersion", "buildVendorStyles", "buildVendorFonts"]));

_gulp2.default.task("build", _proGulp2.default.task("build"));

/*
*   Config generator
*/

_proGulp2.default.task("config", function () {
    var config = {};
    if (NODE_ENV === "development") {
        // In development, read from the `.env` file
        try {
            var env = _fs2.default.readFileSync(process.cwd() + "/.env");
            config = _dotenv2.default.parse(env);
        } catch (ignore) {
            console.log("Failed to read configuration from file `.env`");
        }
    }
    if (NODE_ENV === "production") {
        (function () {
            // In production, read from the `process.env` but only those variables
            // having a key that starts with __APP_CONFIG__
            var prefixRegexp = /^__APP_CONFIG__/;
            config = (0, _lodash2.default)(process.env).pickBy(function (value, key) {
                return prefixRegexp.test(key);
            }).mapKeys(function (value, key) {
                return key.replace(prefixRegexp, "");
            });
        })();
    }
    var code = "window.APP_CONFIG = " + JSON.stringify(config, null, 4) + ";";
    _fs2.default.writeFileSync(buildDir + "/app-config.js", code);
});

_gulp2.default.task("config", _proGulp2.default.task("config"));

/*
*   Linter
*/

_gulp2.default.task("lint", function () {
    var srcs = [appDir + "/**/*.js", appDir + "/**/*.jsx", "!" + appDir + "/assets/**/*", testDir + "/**/*.js", testDir + "/**/*.jsx"];
    return _gulp2.default.src(srcs).pipe(gp.eslint()).pipe(gp.eslint.format()).pipe(gp.eslint.failAfterError());
});

/*
*   Testers
*/

_proGulp2.default.task("test", function () {
    return _gulp2.default.src([testDir + "/**/*.js", testDir + "/**/*.jsx"]).pipe(gp.spawnMocha({
        compilers: "jsx:babel-register",
        env: {
            NODE_ENV: "test",
            NODE_PATH: "" + appDir
        }
    })).on("error", function () {
        // Swallow errors
        this.emit("end");
    });
});

_gulp2.default.task("test", _proGulp2.default.task("test"));

_proGulp2.default.task("coverage", function () {
    var command = ["env NODE_ENV=\"test\"", "env NODE_PATH=\"" + appDir + "\"", npmDir + "/babel-node", npmDir + "/isparta cover --include \"**/*.js\" --include \"**/*.jsx\"", npmDir + "/_mocha -- test/*.js* test/**/*.js*"].join(" ");
    (0, _child_process.execSync)(command, {
        env: process.env,
        stdio: "inherit"
    });
});

_gulp2.default.task("coverage", _proGulp2.default.task("coverage"));

/*
*   Tasks to setup the development environment
*/

_proGulp2.default.task("setupDevServer", function () {
    (0, _browserSync2.default)({
        server: {
            baseDir: buildDir,
            middleware: [(0, _connectHistoryApiFallback2.default)()]
        },
        files: buildDir + "/**/*",
        port: 8080,
        ghostMode: false,
        injectChanges: false,
        notify: false,
        open: false,
        reloadDebounce: 1000
    });
});

_proGulp2.default.task("setupWatchers", function () {
    _gulp2.default.watch(appDir + "/main.html", _proGulp2.default.task("buildMainHtml"));
    _gulp2.default.watch(appDir + "/.env", _proGulp2.default.task("config"));
    _gulp2.default.watch([appDir + "/**/*.jsx", appDir + "/**/*.js"], _proGulp2.default.parallel(["buildAllScripts", "test"]));
    _gulp2.default.watch(appDir + "/assets/**/*", _proGulp2.default.task("buildAppAssets"));
    _gulp2.default.watch([testDir + "/**/*.jsx", testDir + "/**/*.js"], _proGulp2.default.task("test"));
    _gulp2.default.watch(depsPath, _proGulp2.default.parallel(["buildAllScripts", "buildVendorFonts", "buildVendorStyles", "test"]));
});

_gulp2.default.task("dev", _proGulp2.default.sequence(["build", "config", "test", "setupDevServer", "setupWatchers"]));

/*
*   Default task
*/

_gulp2.default.task("default", function () {
    gp.util.log("");
    gp.util.log("Usage: " + gp.util.colors.blue("sd-builder [TASK]"));
    gp.util.log("");
    gp.util.log("Available tasks:");
    gp.util.log("  " + gp.util.colors.green("build") + "    build the project");
    gp.util.log("  " + gp.util.colors.green("config") + "   write the configuration to app-config.js");
    gp.util.log("  " + gp.util.colors.green("dev") + "      set up dev environment with auto-recompiling");
    gp.util.log("  " + gp.util.colors.green("lint") + "     lint application source code");
    gp.util.log("  " + gp.util.colors.green("test") + "     run tests");
    gp.util.log("  " + gp.util.colors.green("coverage") + " run tests and calculate coverage");
    gp.util.log("");
});

